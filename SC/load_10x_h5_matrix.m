function [counts, barcodes, features] = load_10x_h5_matrix(h5_file)

    assert(exist(h5_file, 'file')==2, sprintf('Invalid path to 10x counts file: %s\n', h5_file));
    
    fprintf('Loading 10x counts matrix: %s\n', h5_file);
    
    info = h5info(h5_file);
    
    prefix = info.Groups(1).Name;
    data = h5read(h5_file, sprintf('%s/data', prefix));    
    rowptr = h5read(h5_file, sprintf('%s/indptr', prefix));
    column = h5read(h5_file, sprintf('%s/indices', prefix));
    shape = h5read(h5_file, sprintf('%s/shape', prefix));
    shape = flipud(shape)';
    
    counts = sparse(double(repelem([1:shape(1)]', diff(rowptr))), double(column)+1, ...
                    double(data), double(shape(1)), double(shape(2)));
    
    barcodes = h5read(h5_file, sprintf('%s/barcodes', prefix));
    barcodes = extractBetween(barcodes, 1, 16);
    
    % The H5 files should come with provenance about which version of the
    % software generated them, but they don't, so I'm using this as the
    % switch based on manual inspection of the file structure generated by
    % Version 2.1 vs 3.0 of the software.
    if (isempty(info.Groups(1).Groups))
        % CellRanger 2.1
        features = h5read(h5_file, sprintf('%s/gene_names', prefix));
    else
        % CellRanger 3.0
        features = h5read(h5_file, sprintf('%s/name', info.Groups(1).Groups(1).Name));
    end
    features = deblank(features);
    
    assert(size(counts,1) == size(barcodes,1), 'Number of barcodes and rows in count matrix do not match');
    assert(size(counts,2) == size(features,1), 'Number of features and columns in count matrix do not match');
end